---
openapi: 3.0.0
info:
  title: SUPERLIGA
  description: This is an API for SUPERLIGA manager
  termsOfService: http://swagger.io/terms/
  contact:
    email: sarithol@post.bgu.ac.il
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 3.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://virtserver.swaggerhub.com/saritholl/SUPERLIGA/3.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: league
  description: Data about the League
- name: round
  description: Contains all the maches of a specific round (stage).
- name: matches
  description: Represents a mach between two teams, home team VS away team.
- name: teams
  description: Contains players and coaches. commpiting agains other teams during a season
- name: users
  description: Every person who uses the platform and registered
- name: auth
  description: Register, login users, logout
- name: players
  description: Play within a team, every player as a position on the court
- name: events
  description: Represent every event happened in a match
- name: scores
  description: Represent score of teams in a match
paths:
  /league/getDetails:
    get:
      tags:
      - league
      summary: Get League details
      description: Returns theleague data
      operationId: getLeagueDetails
      responses:
        "200":
          description: successful operation
          content:
            application/yaml:
              schema:
                $ref: '#/components/schemas/League'
            application/json:
              schema:
                $ref: '#/components/schemas/League'
  /round/{roundId}:
    get:
      tags:
      - round
      summary: Find round by ID
      description: Returns a single round
      operationId: getRoundById
      parameters:
      - name: roundId
        in: path
        description: ID of round to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/yaml:
              schema:
                $ref: '#/components/schemas/Round'
            application/json:
              schema:
                $ref: '#/components/schemas/Round'
        "400":
          description: Invalid ID supplied
        "404":
          description: Round not found
  /matches/add:
    post:
      tags:
      - matches
      summary: Add a new match to the system
      operationId: createMatch
      requestBody:
        description: Match object that needs to be added to the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
          application/yaml:
            schema:
              $ref: '#/components/schemas/Match'
        required: true
      responses:
        "201":
          description: A new match have been created
  /matches/all:
    get:
      tags:
      - matches
      summary: Get all matches
      description: return all matches
      operationId: getAllMatches
      responses:
        "200":
          description: successful operation
          content:
            application/yaml:
              schema:
                $ref: '#/components/schemas/Match'
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        "404":
          description: matches not found
  /matches/{matchId}:
    get:
      tags:
      - matches
      summary: Find match by ID
      description: Returns a single match
      operationId: getMatchById
      parameters:
      - name: matchId
        in: path
        description: ID of match to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/yaml:
              schema:
                $ref: '#/components/schemas/Match'
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        "400":
          description: Invalid ID supplied
        "404":
          description: match not found
  /matches/findByTeam/{teamId}:
    get:
      tags:
      - matches
      summary: Finds matches by team
      operationId: findMatchesByTeam
      parameters:
      - name: teamId
        in: path
        description: ID of team to return it's matches
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/yaml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
        "400":
          description: Invalid team id value
        "404":
          description: team id not found
  /matches/list/{matchIds}:
    get:
      tags:
      - matches
      summary: Finds matches by list of IDs
      operationId: matchIds
      parameters:
      - name: matchIds
        in: path
        description: IDs of matches to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/yaml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
        "400":
          description: Invalid team id value
        "404":
          description: matches not found
  /teams/{teamId}:
    get:
      tags:
      - teams
      summary: Find team by ID
      description: Returns a single team
      operationId: getTeamById
      parameters:
      - name: teamId
        in: path
        description: ID of team to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/yaml:
              schema:
                $ref: '#/components/schemas/Team'
        "400":
          description: Invalid ID supplied
        "404":
          description: Team not found
  /teams/all:
    get:
      tags:
      - teams
      summary: Get all teams
      description: return all teams
      operationId: getAllTeams
      responses:
        "200":
          description: successful operation
          content:
            application/yaml:
              schema:
                $ref: '#/components/schemas/Match'
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        "404":
          description: matches not found
  /teams/query:
    get:
      tags:
      - teams
      summary: Query teams
      operationId: queryTeams
      parameters:
      - name: search
        in: query
        description: search string
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: asc
            enum:
            - asc
            - desc
      responses:
        "200":
          description: successful operation
          content:
            application/yaml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
  /register:
    post:
      tags:
      - auth
      summary: Create new user
      description: A new user from the client is added to the server
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/yaml:
            schema:
              $ref: '#/components/schemas/body'
          application/json:
            schema:
              $ref: '#/components/schemas/body_1'
      responses:
        "201":
          description: A new user has been added
          content:
            application/yaml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /login:
    post:
      tags:
      - auth
      summary: Login an exist user
      description: An exist user login to the system
      operationId: loginUser
      requestBody:
        description: The user name for login
        content:
          application/yaml:
            schema:
              $ref: '#/components/schemas/body_2'
          application/json:
            schema:
              $ref: '#/components/schemas/body_3'
      responses:
        "201":
          description: User was found in the DB and authenitcated successfully
          content:
            application/yaml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /logout:
    post:
      tags:
      - auth
      summary: logout a user from the system and delete his cookie
      operationId: logoutUser
      responses:
        "201":
          description: the user has ben successfully logged out
  /users/favoriteMatch:
    post:
      tags:
      - users
      summary: add favorite match
      description: A new favorite match from the client is added to the server
      operationId: favorite match
      requestBody:
        description: Created match object
        content:
          application/yaml:
            schema:
              $ref: '#/components/schemas/Match'
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
        required: true
      responses:
        "201":
          description: A new user has been added
  /users/favoriteMatch/{matchId}:
    delete:
      tags:
      - users
      summary: delete a favorite match
      operationId: FavoriteMatch
      parameters:
      - name: matchId
        in: path
        description: delete favorite match by match id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: match not found
  /users/favoriteMatches:
    get:
      tags:
      - users
      summary: get the favorite matches
      operationId: favoriteMatches
      responses:
        "200":
          description: successfully matches
          content:
            application/yaml:
              schema:
                $ref: '#/components/schemas/Match'
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
  /players/{playerId}:
    get:
      tags:
      - players
      summary: Find player by ID
      description: Returns a single player
      operationId: getPlayerById
      parameters:
      - name: playerId
        in: path
        description: ID of player to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Player was successfully found
          content:
            application/yaml:
              schema:
                $ref: '#/components/schemas/Player'
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        "400":
          description: Invalid ID supplied
        "404":
          description: player not found
  /players/findByTeam/{teamId}:
    get:
      tags:
      - players
      summary: Finds players by team
      operationId: findPlayersByTeam
      parameters:
      - name: teamId
        in: path
        description: ID of team to return it's players
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Players were successfully found
          content:
            application/yaml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
        "400":
          description: Invalid team id value
        "404":
          description: Team not found
  /players/query:
    get:
      tags:
      - players
      summary: Query players
      operationId: queryPlayers
      parameters:
      - name: search
        in: query
        description: search string
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: position
        in: query
        description: filter by position
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: teamName
        in: query
        description: filter by team name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: asc
            enum:
            - asc
            - desc
      responses:
        "200":
          description: successful operation
          content:
            application/yaml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
  /events/add:
    post:
      tags:
      - events
      summary: Add a new event to the system
      operationId: createEvent
      requestBody:
        description: Event object that needs to be added to the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/yaml:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        "201":
          description: A new event have been created
  /scores/add:
    post:
      tags:
      - scores
      summary: Add score to a match
      operationId: createScore
      requestBody:
        description: Score object that needs to be added to the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Score'
          application/yaml:
            schema:
              $ref: '#/components/schemas/Score'
        required: true
      responses:
        "201":
          description: A new score have been created
components:
  schemas:
    League:
      type: object
      properties:
        id:
          type: string
          example: "10"
        name:
          type: string
          example: Permier league
        currentSeasonId:
          type: string
          example: "11"
        currentRoundId:
          type: string
          example: "123"
        currentSeasonName:
          type: string
          example: 2020/2021
      example:
      - id: "10"
        name: Permier league
        currentSeasonId: "11"
        currentRoundId: "123"
        currentSeasonName: 2020/2021
      xml:
        name: League
    Round:
      type: object
      properties:
        id:
          type: string
          example: "10"
        matches:
          type: array
          items:
            $ref: '#/components/schemas/Match'
    Match:
      type: object
      properties:
        id:
          type: string
          example: "10"
        leagueId:
          type: string
          example: "11"
        seasonId:
          type: string
          example: "12"
        roundId:
          type: string
          example: "13"
        stadium:
          $ref: '#/components/schemas/Stadium'
        homeTeam:
          $ref: '#/components/schemas/Team'
        awayTeam:
          $ref: '#/components/schemas/Team'
        referee:
          type: string
          example: Sapir Berman
        events:
          type: array
          xml:
            name: event
            wrapped: true
          items:
            $ref: '#/components/schemas/Event'
        start:
          type: string
          format: date-time
          example: 2021-01-30T20:30:00Z
        homeTeamGoals:
          type: integer
          format: int32
          example: 2
        awayTeamGoals:
          type: integer
          format: int32
          example: 1
        status:
          type: string
          description: Match Status
          example: done
          enum:
          - future
          - playing
          - done
      xml:
        name: Match
    Stadium:
      type: object
      properties:
        id:
          type: string
          example: "11"
        name:
          type: string
          example: Sami Offer
    Team:
      type: object
      properties:
        id:
          type: string
          example: "10"
        name:
          type: string
          example: Maccabi Haifa
        stadiumId:
          type: string
          example: "11"
        stadiumName:
          type: string
          example: Sami Offer
        teamLogo:
          type: string
          example: https://en.wikipedia.org/wiki/Maccabi_Haifa_F.C.#/media/File:Maccabi_Haifa_FC_Logo_2020.png
      example:
      - id: "10"
        name: Maccabi Haifa
        stadiumId: "11"
        teamLogo: https://en.wikipedia.org/wiki/Maccabi_Haifa_F.C.#/media/File:Maccabi_Haifa_FC_Logo_2020.png
      xml:
        name: Team
    User:
      type: object
      properties:
        id:
          type: string
          example: "10"
        favoriteMatches:
          type: array
          xml:
            name: match
            wrapped: true
          items:
            $ref: '#/components/schemas/Match'
        userName:
          type: string
          example: Yaniv20
        firstName:
          type: string
          example: Yaniv
        lastName:
          type: string
          example: Katan
        country:
          type: string
          example: Israel
        password:
          type: string
          example: yanivk20
        email:
          type: string
          example: yaniv20@gmail.com
        picture:
          type: string
          example: https://secure.cache.images.core.optasports.com/soccer/players/150x150/56064.png
        isAdmin:
          type: boolean
          example: false
      xml:
        name: User
    Player:
      type: object
      properties:
        id:
          type: string
          example: "10"
        common name:
          type: string
          example: Josh Cohen
        nationality:
          type: string
          example: American
        date of birth:
          type: string
          example: August 18, 1992
        country of birth:
          type: string
          example: USA
        hight:
          type: number
          example: 1.86
        weight:
          type: number
          example: 79
        team:
          $ref: '#/components/schemas/Team'
        picture:
          type: string
          example: https://static.football.co.il/wp-content/themes/kingclub-theme/images/players/26-99-353088.png
        position:
          type: string
          example: Goalkeeper
      xml:
        name: Player
    Event:
      type: object
      properties:
        id:
          type: string
          example: "10"
        minute:
          type: integer
          format: int32
          example: 33
        description:
          type: string
          example: yellow card to Raz Meir
        type:
          type: string
          description: Event Type
          example: goal
      xml:
        name: MatchEvent
    Score:
      type: object
      properties:
        id:
          type: string
          example: "5"
        matchId:
          type: string
          example: "10"
        home:
          type: integer
          format: int32
          example: 2
        away:
          type: integer
          format: int32
          example: 1
      xml:
        name: MatchEvent
    body:
      type: object
      properties:
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        country:
          type: string
        password:
          type: string
        email:
          type: string
        profile_picture:
          type: string
    body_1:
      type: object
      properties:
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        country:
          type: string
        password:
          type: string
        email:
          type: string
        profile_picture:
          type: string
    body_2:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    body_3:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
